{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\broy9\\\\OneDrive\\\\Desktop\\\\TOPPR\\\\Quizmania-Level3-main\\\\src\\\\components\\\\SnackBar.js\";\nimport React, { useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nexport default function SnackBar(_ref) {\n  var isVisible = _ref.isVisible,\n      _ref$timeout = _ref.timeout,\n      timeout = _ref$timeout === void 0 ? 5000 : _ref$timeout,\n      text = _ref.text,\n      type = _ref.type,\n      boxStyle = _ref.boxStyle,\n      textStyle = _ref.textStyle,\n      onClose = _ref.onClose;\n  useEffect(function () {\n    setTimeout(function () {\n      console.log(\"hiding snack bar in 5 s\");\n      onClose();\n    }, timeout);\n  }, []);\n\n  function renderTypeStyle(type) {\n    if (type === \"error\") {\n      return styles.errorBox;\n    } else if (type === \"success\") {\n      return styles.successBox;\n    } else if (type === \"info\") {\n      return styles.infoBox;\n    }\n\n    return \"\";\n  }\n\n  return isVisible ? React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: [styles.content, renderTypeStyle(type), boxStyle],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: styles.closeIcon,\n    onPress: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }\n  }, React.createElement(Text, {\n    style: styles.closeIconText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 25\n    }\n  }, \"x\")), React.createElement(View, {\n    style: styles.textContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }\n  }, React.createElement(Text, {\n    style: [styles.text, textStyle],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 25\n    }\n  }, text)))) : null;\n}\nvar styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    bottom: 50,\n    left: 0,\n    right: 0,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  content: {\n    margin: \"auto\",\n    width: \"80%\",\n    borderRadius: 6,\n    shadowColor: 'grey',\n    shadowOpacity: .8,\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    elevation: 10,\n    backgroundColor: \"#303030\"\n  },\n  closeIcon: {\n    alignSelf: \"flex-end\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: 17,\n    height: 17,\n    marginTop: 2,\n    marginRight: 2,\n    borderRadius: 50\n  },\n  closeIconText: {\n    fontSize: 17,\n    fontWeight: '600',\n    color: 'white'\n  },\n  textContainer: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingBottom: 10,\n    paddingHorizontal: 4\n  },\n  text: {\n    textAlign: \"center\",\n    fontSize: 15,\n    color: '#f1f1f1'\n  },\n  errorBox: {\n    backgroundColor: \"#da0b0b\"\n  },\n  successBox: {\n    backgroundColor: \"#00cc00\"\n  },\n  infoBox: {\n    backgroundColor: \"#00ace6\"\n  }\n});","map":{"version":3,"sources":["C:/Users/broy9/OneDrive/Desktop/TOPPR/Quizmania-Level3-main/src/components/SnackBar.js"],"names":["React","useEffect","SnackBar","isVisible","timeout","text","type","boxStyle","textStyle","onClose","setTimeout","console","log","renderTypeStyle","styles","errorBox","successBox","infoBox","container","content","closeIcon","closeIconText","textContainer","StyleSheet","create","position","bottom","left","right","justifyContent","alignItems","margin","width","borderRadius","shadowColor","shadowOpacity","shadowOffset","height","elevation","backgroundColor","alignSelf","marginTop","marginRight","fontSize","fontWeight","color","paddingBottom","paddingHorizontal","textAlign"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\n\nexport default function SnackBar({\n    isVisible,\n    timeout = 5000,\n    text,\n    type,\n    boxStyle,\n    textStyle,\n    onClose,\n}) {\n    // component did mount\n    useEffect(() => {\n        setTimeout(function() {\n            console.log(\"hiding snack bar in 5 s\");\n            onClose();\n        }, timeout);\n    }, [])\n\n    //function to render different types of snackbar\n    function renderTypeStyle(type) {\n        if (type === \"error\") {\n            return styles.errorBox;\n        } else if (type === \"success\") {\n            return styles.successBox;\n        } else if (type === \"info\") {\n            return styles.infoBox;\n        }\n\n        return \"\";\n    }\n\n    //component rendering\n    return (\n        isVisible ?\n            <View\n                style={styles.container}\n            >\n                <View style={[styles.content, renderTypeStyle(type), boxStyle]}>\n                    <TouchableOpacity style={styles.closeIcon} onPress={onClose}>\n                        <Text style={styles.closeIconText}>x</Text>\n                    </TouchableOpacity>\n                    <View style={styles.textContainer}>\n                        <Text style={[styles.text, textStyle]}>{text}</Text>\n                    </View>\n                </View>\n\n            </View>\n            : null\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        position: 'absolute',\n        bottom: 50,\n        left: 0,\n        right: 0,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n    },\n\n    content: {\n        margin: \"auto\",\n        width: \"80%\",\n        borderRadius: 6,\n        shadowColor: 'grey',\n        shadowOpacity: .8,\n        shadowOffset: { width: 0, height: 2 },\n        elevation: 10,\n        backgroundColor: \"#303030\",\n    },\n\n    closeIcon: {\n        alignSelf: \"flex-end\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        width: 17,\n        height: 17,\n        marginTop: 2,\n        marginRight: 2,\n        borderRadius: 50,\n    },\n\n    closeIconText: {\n        fontSize: 17,\n        fontWeight: '600',\n        color: 'white',\n    },\n\n    textContainer: {\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        paddingBottom: 10,\n        paddingHorizontal: 4,\n    },\n\n    text: {\n        textAlign: \"center\",\n        fontSize: 15,\n        color: '#f1f1f1',\n    },\n\n    errorBox: {\n        backgroundColor: \"#da0b0b\",\n    },\n\n    successBox: {\n        backgroundColor: \"#00cc00\",\n    },\n\n    infoBox: {\n        backgroundColor: \"#00ace6\",\n    }\n});\n"]},"metadata":{},"sourceType":"module"}